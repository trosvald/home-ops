---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  genconfig:
    desc: Generate the Talos configs
    prompt: Generate talos config for '{{.CLUSTER}}' cluster ... continue?
    cmds:
      - talhelper genconfig
        -c {{.CLUSTER_DIR}}/talos/talconfig.yaml
        -s {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml
        -e {{.CLUSTER_DIR}}/talos/talenv.sops.yaml
        -o {{.CLUSTER_DIR}}/talos/clusterconfig
      # - cp -f {{.CLUSTER_DIR}}/talos/clusterconfig/*.yaml {{.CLUSTER_DIR}}/talos/assets
      - cp {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig {{.CLUSTER_DIR}}
      # - rename 's/(prod|infra)-//;' {{.CLUSTER_DIR}}/talos/assets/*.yaml
      # - rename 's/(\.monosense.dev.yaml|\.monosense.io.yaml)$/\.sops.yaml/;' {{.CLUSTER_DIR}}/talos/assets/*.yaml
      # - '{{if eq .CLUSTER "infra"}}sh -c "{{.ROOT_DIR}}/tools/infra.sh" {{else}}sh -c "{{.ROOT_DIR}}/tools/main.sh"{{end}}'
      # - find {{.CLUSTER_DIR}}/talos/assets -type f | xargs -I{} sh -c "sops  --encrypt --encrypted-regex '^(token|crt|key|id|secret|secretboxEncryptionSecret|ca)$' --in-place {}"
    requires:
      vars: [CLUSTER]
    preconditions:
      - which talhelper
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
      - test -f {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml
      - test -f {{.CLUSTER_DIR}}/talos/talenv.sops.yaml

  apply-node:
    desc: Apply Talos config to a node [CLUSTER=prod] [HOSTNAME=required]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - task: down
      - talosctl apply-config --nodes {{.HOSTNAME}} --mode={{.MODE}} --file {{.CLUSTER_DIR}}/talos/clusterconfig/{{.CLUSTER}}-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - task: up
    vars:
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
      - test -f {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig
      - which talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [CLUSTER=prod] [HOSTNAME=required]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - task: down
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}}
        upgrade --image="factory.talos.dev/installer{{if eq .TALOS_SECUREBOOT "true"}}-secureboot"{{end}}/{{.TALOSC_SCHEMATIC_ID}}:$TALOS_VERSION"
        --timeout=10m
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - task: up
    vars:
      TALOSC_SCHEMATIC_ID:
        sh: talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get nodeannotationspecs --output json | jq --raw-output '.spec | select(.key == "extensions.talos.dev/schemati") | .value'
      TALOS_SECUREBOOT:
        sh: talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get securitystate --output=jsonpath='{.spec.secureBoot}'
    requires:
      vars: [CLUSTER,HOSTNAME]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/$TALOS_VERSION
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq kubectl talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster [CLUSTER=prod] [VERSION=reuired]
    prompt: Upgrading Kubernetes on {{.CLUSTER}} cluster ... continue?
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - task: down
      - talosctl --context {{.CLUSTER}} --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to $KUBERNETES_VERSION
      - task: up
    vars:
      TALOS_CONTROLLER:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/$KUBERNETES_VERSION
      - talosctl --context {{.CLUSTER}} --nodes {{.TALOS_CONTROLLER}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [CLUSTER=prod] [HOSTNAME=required] [MODE=default]
    cmds:
      - task: down
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} reboot --mode={{.MODE}}
      - talosctl --context {{.CLUSTER}} health --wait-timeout=10m --server=false
      - task: up
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [CLUSTER,HOSTNAME]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown talos across the whole cluster [CLUSTER=prod]
    prompt: Shutdown cluster '{{.CLUSTER}}' ... continue?
    cmd: talosctl --context {{.CLUSTER}} shutdown --nodes {{.HOSTNAME}} --force
    vars:
      HOSTNAME:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq kubectl

  reset-node:
    desc: Reset Talos on single node [CLUSTER=prod] [HOSTNAME=required]
    prompt: Reset talos node '{{.HOSTNAME}}' on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster [CLUSTER=prod]
    prompt: Reset the talos cluster '{{.CLUSTER}}' ... continue?
    cmd: talosctl --context {{.CLUSTER}} reset --nodes {{.HOSTNAME}} --graceful=false
    vars:
      HOSTNAME:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} --nodes {{.HOSTNAME}} get machineconfig
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq talosctl

  kubeconfig:
    desc: Generate kubeconfig for talos cluster [CLUSTER=prod]
    cmd: talosctl --context {{.CLUSTER}} kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq talosctl

  apply-cluster:
    desc: Apply Talos config acrossthe whole cluster [CLUSTER=prod] [MODE=default]
    cmds:
      - for: { var: HOSTNAME }
        task: apply-node
        vars:
          HOSTNAME: '{{.ITEM}}'
          MODE: '{{.MODE}}'
          CLUSTER: '{{.CLUSTER}}'
    vars:
      MODE: '{{.MODE | default "auto"}}'
      HOSTNAME:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which jq talosctl

  upgrade-cluster:
    desc: Upgrade Talos across the whole cluster [CLUSTER=prod]
    cmds:
      - for: { var: HOSTNAME }
        task: upgrade-node
        vars:
          HOSTNAME: '{{.ITEM}}'
          CLUSTER: '{{.CLUSTER}}'
    vars:
      HOSTNAME:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which jq talosctl

  reboot-cluster:
    desc: Reboot talos on a single node [CLUSTER=prod] [HOSTNAME=required] [MODE=default]
    cmds:
      - for: { var: HOSTNAME }
        task: reboot-node
        vars:
          HOSTNAME: '{{.ITEM}}'
          MODE: '{{.MODE}}'
          CLUSTER: '{{.CLUSTER}}'
    vars:
      HOSTNAME:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which jq talosctl

  down:
    internal: true
    cmds:
      - until kubectl --context {{.CLUSTER}} wait cephcluster --for=jsonpath=.status.ceph.health=HEALTH_OK --timeout=10m --all-namespaces &>/dev/null; do sleep 5; done
      - until kubectl --context {{.CLUSTER}} wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
    preconditions:
      - which kubectl

  up:
    internal: true
    cmds:
      - until kubectl --context {{.CLUSTER}} wait cephcluster --for=jsonpath=.status.ceph.health=HEALTH_OK --timeout=10m --all --all-namespaces &>/dev/null; do sleep 5; done
      - until kubectl --context {{.CLUSTER}} wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
    preconditions:
      - which kubectl

