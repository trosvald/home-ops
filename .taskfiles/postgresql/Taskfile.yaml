---
version: "3"

tasks:
  crunchy-owner:
    desc: Restore a pg_dump to a CrunchyData Postgres cluster, writing to the master instance.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      db_cluster: '{{.DB_CLUSTER | default "postgres"}}' # postgres cluster name
      ns: '{{.NS | default "database"}}' # database namespace
      APP: "{{.APP}}"
      cluster: '{{ or .CLUSTER (fail "Argument (cluster) is required") }}'
      crunchy_primary:
        sh: |-
          kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} -o jsonpath='{.items[0].metadata.name}'
    requires:
      vars:
        - cluster
        - db_name
    env:
      db_user: '{{.db_user}}'
    cmds:
      - kubectl exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'echo "ALTER DATABASE \"{{.db_name}}\" OWNER TO \"{{.db_user}}\";" | psql'

  crunchy-dump:
    desc: Run pg_dump on the master instance of a CrunchyData Postgres cluster.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      db_cluster: '{{.DB_CLUSTER | default "postgres"}}' # postgres cluster name
      ns: '{{.NS | default "database"}}' # database namespace
      crunchy_primary:
        sh: |-
          kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} -o jsonpath='{.items[0].metadata.name}'
      data_dir: '{{ .data_dir | default "/pgdata" }}'
      output_dir: '{{ .output_dir | default "." }}'
      cli_args:
        sh: |-
          [[ -n "{{.cli_args}}" ]] && echo "{{.cli_args}}" || echo "--verbose --format=c --no-comments --clean --if-exists --no-owner --extension plpgsql"
    cmds:
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'pg_dump --dbname {{.db_name}} {{.cli_args}} --file {{.data_dir}}/{{.db_name}}.psql'
      - kubectl --context {{.CLUSTER}} cp --container database "{{.NS}}/{{.crunchy_primary}}:{{.data_dir}}/{{.db_name}}.psql" "{{.output_dir}}/{{.db_name}}.psql"
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'rm -rf {{.data_dir}}/{{.db_name}}.psql'
    requires:
      vars:
        - cluster
        - db_name
    preconditions:
      - sh: kubectl config get-contexts {{.CLUSTER}}
        msg: "Kubectl context {{.CLUSTER}} not found"
      - kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}}

  crunchy-dumpall:
    desc: Run pg_dumpall on the master instance of a CrunchyData Postgres cluster.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      db_cluster: '{{.DB_CLUSTER | default "postgres"}}' # postgres cluster name
      ns: '{{.NS | default "database"}}' # database namespace
      crunchy_primary:
        sh: |-
          kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} -o jsonpath='{.items[0].metadata.name}'
      data_dir: '{{ .data_dir | default "/pgdata" }}'
      output_dir: '{{ .output_dir | default "." }}'
      cli_args:
        sh: |-
          [[ -n "{{.cli_args}}" ]] && echo "{{.cli_args}}" || echo "--verbose --format=c --no-comments --clean --if-exists --no-owner --extension plpgsql"
    cmds:
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'pg_dumpall -c --file {{.data_dir}}/{{.DB_CLUSTER}}.psql'
      - kubectl --context {{.CLUSTER}} cp --container database "{{.NS}}/{{.crunchy_primary}}:{{.data_dir}}/{{.DB_CLUSTER}}.psql" "{{.output_dir}}/{{.DB_CLUSTER}}.psql"
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'rm -rf {{.data_dir}}/{{.DB_CLUSTER}}.psql'
    requires:
      vars:
        - cluster
    preconditions:
      - sh: kubectl config get-contexts {{.CLUSTER}}
        msg: "Kubectl context {{.CLUSTER}} not found"
      - kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}}

  crunchy-restore:
    desc: Restore a pg_dump to a CrunchyData Postgres cluster, writing to the master instance.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      db_cluster: '{{.DB_CLUSTER | default "postgres"}}' # postgres cluster name
      ns: '{{.NS | default "database"}}' # database namespace
      crunchy_primary:
        sh: |-
          kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} -o jsonpath='{.items[0].metadata.name}'
      data_dir: '{{ .data_dir | default "/pgdata" }}'
      cli_args:
        sh: |-
          [[ -n "{{.cli_args}}" ]] && echo -n "{{.cli_args}}" || echo -n "--verbose --format=c --clean --if-exists --no-owner --role {{.db_user}}"
    cmds:
      - kubectl --context {{.CLUSTER}} cp --container database "{{.file}}" "{{.NS}}/{{.crunchy_primary}}:{{.data_dir}}/restore-{{.db_name}}.psql"
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'echo "ALTER DATABASE \"{{.db_name}}\" OWNER TO \"{{.db_user}}\";" | psql'
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'pg_restore --dbname {{.db_name}} {{.cli_args}} {{.data_dir}}/restore-{{.db_name}}.psql'
      - defer: kubectl --context {{.CLUSTER}} exec -it -n {{.NS}} {{.crunchy_primary}} -- /bin/bash -c 'rm -rf {{.data_dir}}/restore-{{.db_name}}.psql'
    requires:
      vars:
        - cluster
        - db_name
        - db_user
        - file
    preconditions:
      - sh: kubectl config get-contexts {{.CLUSTER}}
        msg: "Kubectl context {{.CLUSTER}} not found"
      - kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}}
      - test -f "{{.file}}"

  crunchy-exec:
    desc: Exec in to the master instance of a CrunchyData Postgres cluster.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      db_cluster: '{{.DB_CLUSTER | default "postgres"}}' # postgres cluster name
      ns: '{{.NS | default "database"}}' # database namespace
      crunchy_primary:
        sh: |-
          kubectl --context {{.CLUSTER}} get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl --context {{.CLUSTER}} exec -it --container database -n {{.NS}} {{.crunchy_primary}} -- /bin/bash

  crunchy-restart:
    desc: Gracefully restart a CrunchyData Postgres Cluster.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      db_cluster: '{{.DB_CLUSTER | default "postgres"}}' # postgres cluster name
      ns: '{{.NS | default "database"}}' # database namespace
    cmds:
      - kubectl --context {{ .CLUSTER }} patch -n {{.NS}} postgrescluster/{{.DB_CLUSTER}} --type merge --patch '{"spec":{"metadata":{"annotations":{"restarted":"'"$(date)"'"}}}}'