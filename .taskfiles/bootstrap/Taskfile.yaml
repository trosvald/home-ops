---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BOOTSTRAP_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/bootstrap/resources'

tasks:

  gen-secrets:
    desc: Generate the Talos secrets
    prompt: Generate talos secrets for '{{.CLUSTER}}' cluster ... continue?
    cmds:
      - talhelper -f {{.CLUSTER_DIR}}/talos/talconfig.yaml gensecret > {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml
      - task: :sops:.encrypt-file
        vars:
          FILE: "{{.CLUSTER_DIR}}/talos/talsecret.sops.yaml"
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
    status:
      - test -f "{{.CLUSTER_DIR}}/talos/talsecret.sops.yaml"

  gen-config:
    desc: Generate the Talos configs
    prompt: Generate talos config for '{{.CLUSTER}}' cluster ... continue?
    cmds:
      - talhelper genconfig
        -c {{.CLUSTER_DIR}}/talos/talconfig.yaml
        -s {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml
        -e {{.CLUSTER_DIR}}/talos/talenv.sops.yaml
        -o {{.CLUSTER_DIR}}/talos/clusterconfig
      - cp {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig {{.CLUSTER_DIR}}
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
      - test -f {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml

  apply-config:
    desc: Apply the Talos config on a nodes for a new cluster
    prompt: Apply talos config for '{{.CLUSTER}}' cluster ... continue?
    dir: "{{.CLUSTER_DIR}}/talos/"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
      - test -f {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    prompt: Bootstrap talos for '{{.CLUSTER}}' cluster ... continue?
    cmds:
      - until talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig config info
      - which talosctl

  rook:
    desc: Bootstrap Rook-Ceph [CLUSTER=main] [MODEL=required] ## Figure this bs out
    cmds:
      - minijinja-cli {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook.yaml.j2 | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - until kubectl --context {{.CLUSTER}} --namespace default get job/wipe-rook &>/dev/null; do sleep 5; done
      - kubectl --context {{.CLUSTER}} --namespace default wait job/wipe-rook --for=condition=complete --timeout=5m
      - stern --context {{.CLUSTER}} --namespace default job/wipe-rook --no-follow
      - kubectl --context {{.CLUSTER}} --namespace default delete job wipe-rook
    env:
      NODES:
        sh: talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig config info --output json | jq --raw-output '.nodes | length'
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook.yaml.j2
      - which kubectl minijinja-cli stern talosctl

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    cmds:
      - until kubectl --context {{.CLUSTER}} wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - helmfile --kube-context {{.CLUSTER}} --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.CLUSTER}} wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    requires:
      vars: [CLUSTER]
    preconditions:
      # - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - which helmfile kubectl

  flux:
    desc: Bootstrap Flux [CLUSTER=main]
    prompt: Bootstrap flux for '{{.CLUSTER}}' cluster ... continue?
    cmds:
      - kubectl --context {{.CLUSTER}} apply --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/apps
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - kubectl --context {{.CLUSTER}} apply --server-side --filename {{.CLUSTER_DIR}}/flux/settings/cluster-settings.yaml
      - kubectl --context {{.CLUSTER}} apply --server-side --kustomize {{.CLUSTER_DIR}}/flux/config
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "prod"}}prod{{else}}{{.CLUSTER}}{{end}}' # ¯\_(ツ)_/¯
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSL https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
    requires:
      vars: [CLUSTER]
    preconditions:
      - which curl flux kubectl ls op