---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: alertmanager
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-connect
  target:
    name: alertmanager-secret
    template:
      engineVersion: v2
      data:
        # Yo dawg I heard you like go templating so I put go templates in your go templates
        alertmanager.yaml: |
          global:
            resolve_timeout: 5m
          route:
            group_by: ["alertname", "job"]
            group_interval: 10m
            group_wait: 1m
            receiver: "telegram"
            repeat_interval: 12h
            routes:
              - receiver: "null"
                matchers:
                  - alertname =~ "InfoInhibitor|Watchdog|CPUThrottlingHigh"
              - receiver: "telegram"
          inhibit_rules:
            - source_matchers: ["severity = 'critical'"]
              target_matchers: ["severity = 'warning'"]
              equal: ["alertname", "namespace"]
          receivers:
            - name: "telegram"
              telegram_configs:
                - parse_mode: "HTML"
                  disabled_notifications: false
                  bot_token: "{{ .telegram_bot_token }}"
                  chat_id: "{{ .telegram_channel_id }}"
                  send_resolved: true
                  api_url: https://api.telegram.org
  dataFrom:
    - extract:
        key: telegram
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kps-thanos
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-connect
  target:
    name: kps-thanos
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        objstore.yml: |-
          type: s3
          config:
            bucket: {{ .thanos_s3_bucket }}
            endpoint: {{ .minio_server }}
            region: {{ .minio_region }}
            access_key: {{ .thanos_s3_access_key }}
            secret_key: {{ .thanos_s3_secret_key }}
  dataFrom:
    - extract:
        key: minio
    - extract:
        key: thanos