---
# Note: Gatus vars should be escaped with $${VAR_NAME} to avoid interpolation by Flux
web:
  port: $${WEB_PORT}
storage:
  type: postgres
  path: postgres://$${INIT_POSTGRES_USER}:$${INIT_POSTGRES_PASS}@$${INIT_POSTGRES_HOST}:5432/$${INIT_POSTGRES_DBNAME}?sslmode=disable
  caching: true
metrics: true
debug: false
security:
  oidc:
    issuer-url: https://sso.monosense.io/application/o/gatus
    client-id: $${CLIENT_ID}
    client-secret: $${CLIENT_SECRET}
    redirect-url: https://status.monosense.io/authorization-code/callback
    scopes: [openid]
ui:
  title: Status | Services
  header: Status
alerting:
  telegram:
    id: $${TELEGRAM_CHANNEL_ID}
    token: $${TELEGRAM_TOKEN}
  pushover:
    title: Gatus (Kubernetes)
    application-token: $${PUSHOVER_TOKEN}
    user-key: $${PUSHOVER_USER_KEY}
    priority: 1
    default-alert:
      description: health-check failed
      send-on-resolved: true
      failure-threshold: 3
      success-threshold: 3
connectivity:
  checker:
    target: 1.1.1.1:53
    interval: 1m
endpoints:
  - name: status
    group: external
    url: https://status.monosense.io
    interval: 1m
    client:
      dns-resolver: tcp://1.1.1.1:53
    conditions:
      - "[STATUS] == 200"
    alerts:
      - type: pushover
      - type: telegram
        send-on-resolved: true
  - name: flux-webhook
    group: external
    url: https://flux-webhook.monosense.io
    interval: 1m
    client:
      dns-resolver: tcp://1.1.1.1:53
    conditions:
      - "[STATUS] == 404"
    alerts:
      - type: pushover
      - type: telegram
        send-on-resolved: true
