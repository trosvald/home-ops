---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app planka
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.7.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    controllers:
      planka:
        annotations:
          reloader.stakater.com/auto: 'true'

        containers:
          app:
            image:
              repository: ghcr.io/plankanban/planka
              tag: 1.25.0@sha256:29c6927964387533382ba68e6072ab93a0cf9a6b79faed06912f51d115cb1eda

            env:
              DATABASE_URL:
                valueFrom:
                  secretKeyRef:
                    name: &secret planka-secret
                    key: POSTGRES_URI
              BASE_URL:
                value: '{{ printf "https://%s" (first .Values.ingress.app.hosts).host }}'
              TRUST_PROXY: 1
              OIDC_ENFORCED: 'true'
              OIDC_SCOPES: openid profile email
              OIDC_ADMIN_ROLES: 'planka-admin'
              OIDC_ROLES_ATTRIBUTE: 'groups'
              ALLOW_ALL_TO_CREATE_PROJECTS: 'true'
              S3_ENABLE: true
              S3_FORCE_PATH_STYLE: true

              # - SLACK_BOT_TOKEN=
              # - SLACK_CHANNEL_ID=

            envFrom:
              - secretRef:
                  name: *secret

            probes:
              liveness: &probe
                type: HTTP
                path: /
              readiness: *probe

            resources:
              requests:
                cpu: 10m
                memory: 250Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ 'ALL' ] }

    service:
      app:
        controller: *app
        ports:
          http:
            port: 1337

    ingress:
      app:
        enabled: true
        className: internal
        hosts:
          - host: kanban.${CLUSTER_SECRET_PRD_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      tmp:
        type: emptyDir
        globalMounts:
          - path: /app/logs
            subPath: logs

          - path: /app/.tmp
            subPath: tmp
